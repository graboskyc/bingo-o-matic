@page "/custom-bingo/play"
@using BingoApp.Models
@using BingoApp.Services
@using BingoApp.Features.CustomBingo.Components
@using Microsoft.AspNetCore.Components
@using System.Web

@inject BingoSetService BingoService
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <h1>Custom Bingo</h1>
            <div class="d-flex justify-content-between align-items-center">
                <div class="form-group" style="width: 300px;">
                    <label for="bingoSet">Select Bingo Set</label>
                    <select class="form-select" id="bingoSet" @bind="selectedSetName">
                        <option value="">Select a set...</option>
                        @foreach (var set in BingoService.GetAll())
                        {
                            <option value="@set.Name">@set.Name</option>
                        }
                    </select>
                </div>
                <a href="custom-bingo/manage" class="btn btn-outline-primary">
                    <i class="bi bi-gear"></i> Manage Sets
                </a>
            </div>
        </div>
    </div>

    @if (selectedSet != null)
    {
        <div class="row">
            <div class="col">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0 d-flex justify-content-between align-items-center">
                            <span>@selectedSet.Name</span>
                            <button class="btn btn-primary btn-sm" @onclick="NewGame">
                                <i class="bi bi-arrow-clockwise"></i> New Game
                            </button>
                        </h5>
                    </div>
                    <div class="card-body">
                        <BingoBoard Items="@selectedSet.Items" />
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string selectedSetName = "";
    private BingoSet? selectedSet;
    private int gameId = 0; // Used to force new game board

    protected override void OnInitialized()
    {
        // Check if there's a set name in the query string
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var setName = query["set"];
        if (!string.IsNullOrEmpty(setName))
        {
            selectedSetName = setName;
            selectedSet = BingoService.GetByName(setName);
        }
    }

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(selectedSetName))
        {
            selectedSet = BingoService.GetByName(selectedSetName);
        }
        else
        {
            selectedSet = null;
        }
    }

    private void NewGame()
    {
        gameId++; // This will force the BingoBoard to reinitialize
        StateHasChanged();
    }
}
