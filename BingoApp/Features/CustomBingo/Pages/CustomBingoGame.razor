@page "/custom-bingo/play"
@using BingoApp.Models
@using BingoApp.Services
@using BingoApp.Features.CustomBingo.Components
@using Microsoft.AspNetCore.Components
@using System.Web

@inject BingoSetService BingoService
@inject NavigationManager NavigationManager

<PageTitle>Custom Bingo - Bingo-o-matic</PageTitle>

<div class="bingo-container">
    <div class="bingo-header">
        <div class="bingo-title">
            <h1>Custom Bingo</h1>
            @if (selectedSet != null)
            {
                <p class="lead">Playing: @selectedSet.Name</p>
            }
            else
            {
                <p class="lead">Select a bingo set to play</p>
            }
        </div>
        <div class="bingo-controls">
            <div class="form-group me-2">
                <select class="form-select" id="bingoSet" @bind="selectedSetName" @bind:after="OnBingoSetSelected">
                    <option value="">Select a set...</option>
                    @foreach (var set in BingoService.GetAll())
                    {
                        <option value="@set.Name">@set.Name</option>
                    }
                </select>
            </div>
            <button class="btn btn-primary me-2" @onclick="SelectNext" disabled="@(selectedSet == null || isSelecting)">
                <i class="bi bi-shuffle"></i> Draw Item
            </button>
            <button class="btn btn-outline-primary me-2" @onclick="NewGame" disabled="@(selectedSet == null)">
                <i class="bi bi-arrow-repeat"></i> Reset
            </button>
            <a href="custom-bingo/manage" class="btn btn-outline-secondary">
                <i class="bi bi-gear"></i> Manage Sets
            </a>
        </div>
    </div>

    @if (selectedSet != null)
    {
        <BingoBoard @ref="bingoBoard" Items="@selectedSet.Items" @key="gameId" />
    }
</div>

@code {
    private string selectedSetName = "";
    private BingoSet? selectedSet;
    private int gameId = 0; // Used to force new game board
    private bool isSelecting = false;
    private BingoBoard? bingoBoard;

    protected override void OnInitialized()
    {
        // Check if there's a set name in the query string
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = HttpUtility.ParseQueryString(uri.Query);
        var setName = query["set"];
        if (!string.IsNullOrEmpty(setName))
        {
            selectedSetName = setName;
            LoadSelectedSet();
        }
    }

    private void OnBingoSetSelected()
    {
        LoadSelectedSet();
        if (selectedSet != null)
        {
            NewGame(); // Reset the game when selecting a new set
        }
    }

    private void LoadSelectedSet()
    {
        if (!string.IsNullOrEmpty(selectedSetName))
        {
            selectedSet = BingoService.GetByName(selectedSetName);
        }
        else
        {
            selectedSet = null;
        }
    }

    private void NewGame()
    {
        gameId++; // This will force the BingoBoard to reinitialize
        StateHasChanged();
    }

    private async Task SelectNext()
    {
        if (bingoBoard != null && !isSelecting && selectedSet != null)
        {
            isSelecting = true;
            await bingoBoard.SelectNextAsync();
            isSelecting = false;
        }
    }
}
