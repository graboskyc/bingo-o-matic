@page "/custom-bingo"

<PageTitle>Custom Bingo - Bingo-o-matic</PageTitle>

<div class="custom-bingo-container">
    <div class="bingo-header">
        <div class="bingo-title">
            <h1>Custom Bingo</h1>
            <p class="lead">Create your own custom bingo game</p>
        </div>
        <div class="bingo-controls">
            @if (isEditMode)
            {
                <button class="btn btn-primary me-2" @onclick="SaveList">
                    <i class="bi bi-check-lg"></i> Save List
                </button>
            }
            else
            {
                <button class="btn btn-primary me-2" @onclick="DrawNext">
                    <i class="bi bi-shuffle"></i> Draw Item
                </button>
                <button class="btn btn-outline-primary me-2" @onclick="ResetGame">
                    <i class="bi bi-arrow-repeat"></i> Reset
                </button>
                <div class="dropdown d-inline-block me-2">
                    <button class="btn btn-outline-secondary dropdown-toggle" type="button" @onclick="ToggleAnimationMenu">
                        <i class="bi bi-magic"></i> Animation
                    </button>
                    @if (showAnimationMenu)
                    {
                        <div class="dropdown-menu show">
                            <button class="dropdown-item" @onclick="() => SelectAnimation(AnimationType.Roulette)">
                                <i class="bi bi-arrow-repeat"></i> Roulette
                            </button>
                            <button class="dropdown-item" @onclick="() => SelectAnimation(AnimationType.Flip)">
                                <i class="bi bi-arrow-clockwise"></i> Flip
                            </button>
                            <button class="dropdown-item" @onclick="() => SelectAnimation(AnimationType.Ticker)">
                                <i class="bi bi-arrow-left-right"></i> Ticker
                            </button>
                        </div>
                    }
                </div>
            }
            <button class="btn btn-outline-secondary" @onclick="ToggleEditMode">
                <i class="bi bi-pencil"></i> @(isEditMode ? "View Mode" : "Edit List")
            </button>
        </div>
    </div>

    @if (isEditMode)
    {
        <div class="edit-section">
            <div class="form-group">
                <label for="itemList">Enter your items (one per line)</label>
                <textarea id="itemList" class="form-control" rows="10" @bind="itemListText"></textarea>
            </div>
        </div>
    }
    else
    {
        @if (currentItem != null)
        {
            <div class="current-item @GetAnimationClass()">
                <div class="item-display">@currentItem</div>
            </div>
        }

        <div class="called-items">
            <div class="called-items-grid">
                @foreach (var item in calledItems)
                {
                    <div class="item-cell">@item</div>
                }
            </div>
        </div>
    }
</div>

@code {
    private bool isEditMode = true;
    private string itemListText = "";
    private List<string> availableItems = new();
    private List<string> calledItems = new();
    private string? currentItem;
    private Random random = new();
    private bool showAnimationMenu;
    private AnimationType currentAnimation = AnimationType.Roulette;

    private enum AnimationType
    {
        Roulette,
        Flip,
        Ticker
    }

    private void ToggleEditMode()
    {
        isEditMode = !isEditMode;
    }

    private void SaveList()
    {
        var items = itemListText.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)
            .Select(i => i.Trim())
            .Where(i => !string.IsNullOrEmpty(i))
            .ToList();

        availableItems = items;
        calledItems.Clear();
        currentItem = null;
        isEditMode = false;
    }

    private void DrawNext()
    {
        if (availableItems.Count == 0)
            return;

        int index = random.Next(availableItems.Count);
        currentItem = availableItems[index];
        availableItems.RemoveAt(index);
        calledItems.Add(currentItem);
    }

    private void ResetGame()
    {
        var items = itemListText.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)
            .Select(i => i.Trim())
            .Where(i => !string.IsNullOrEmpty(i))
            .ToList();

        availableItems = items;
        calledItems.Clear();
        currentItem = null;
    }

    private void ToggleAnimationMenu()
    {
        showAnimationMenu = !showAnimationMenu;
    }

    private void SelectAnimation(AnimationType animation)
    {
        currentAnimation = animation;
        showAnimationMenu = false;
    }

    private string GetAnimationClass() => currentAnimation switch
    {
        AnimationType.Roulette => "animate-roulette",
        AnimationType.Flip => "animate-flip",
        AnimationType.Ticker => "animate-ticker",
        _ => ""
    };
}
