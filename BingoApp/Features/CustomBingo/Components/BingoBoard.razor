@namespace BingoApp.Features.CustomBingo.Components

@if (Items != null && Items.Length > 0)
{
    @if (currentItem != null)
    {
        <div class="current-item @(isAnimating ? "animate" : "")" aria-live="polite">
            <div class="item-display">
                <span class="item">@currentItem</span>
            </div>
        </div>
    }

    <div class="called-items">
        <h4>Called Items</h4>
        <div class="called-items-grid">
            @if (calledItems.Count > 0)
            {
                @foreach (var item in calledItems)
                {
                    <div class="item-cell called">
                        <span>@item</span>
                    </div>
                }
            }
            else
            {
                <p>No items selected yet. Click "Draw Item" to begin.</p>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public string[] Items { get; set; } = Array.Empty<string>();

    private List<string> availableItems = new List<string>();
    private List<string> calledItems = new List<string>();
    private Random random = new Random();
    private string? currentItem;
    private bool isAnimating = false;

    protected override void OnParametersSet()
    {
        ResetGame();
    }

    public void ResetGame()
    {
        if (Items.Length > 0)
        {
            // Reset available and called items
            availableItems = new List<string>(Items);
            calledItems.Clear();
            currentItem = null;
            StateHasChanged();
        }
    }

    public async Task SelectNextAsync()
    {
        if (availableItems.Count == 0)
        {
            return;
        }

        // Select a random item that hasn't been called yet
        int randomIndex = random.Next(0, availableItems.Count);
        currentItem = availableItems[randomIndex];
        availableItems.RemoveAt(randomIndex);
        calledItems.Add(currentItem);

        // Start animation
        isAnimating = true;
        StateHasChanged();

        // End animation after delay
        await Task.Delay(1000);
        isAnimating = false;
        StateHasChanged();
    }

    public void ToggleItem(string item)
    {
        if (calledItems.Contains(item))
        {
            calledItems.Remove(item);
            availableItems.Add(item);
        }
        else
        {
            calledItems.Add(item);
            availableItems.Remove(item);
        }
        StateHasChanged();
    }
}
