@using BingoApp.Layout
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="page @(isImmersive ? "immersive" : "")">
    <header class="app-header">
        <NavMenu />
    </header>

    <main class="app-main">
        <div class="container">
            <article class="content">
                @Body
            </article>
        </div>
    </main>    <footer class="app-footer">
        <div class="container">
            <div class="footer-content">
                <span class="footer-text">&copy; @DateTime.Now.Year Bingo-o-matic</span>
                <a href="https://buymeacoffee.com/jamesmontemagno" target="_blank" class="tip-button" title="Support this project">
                    ☕ Buy me a coffee
                </a>
            </div>
        </div>
    </footer>    <button @onclick="ToggleImmersive" class="immersive-toggle" title="Toggle immersive mode (Spacebar)">
        @if (isImmersive)
        {
            <span class="emoji-icon">🔍</span>
        }
        else
        {
            <span class="emoji-icon">🔎</span>
        }
    </button>

    @if (showPopup)
    {
        <div class="popup-hint">
            Press Spacebar to toggle immersive mode            <button @onclick="@(() => showPopup = false)" class="popup-close">
                <span class="emoji-icon">❌</span>
            </button>
        </div>
    }
</div>

@code {
    private bool isImmersive;
    private bool showPopup;
    private DotNetObjectReference<MainLayout>? objRef;

    protected override async Task OnInitializedAsync()
    {
        objRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("addSpacebarListener", objRef);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Show popup after a short delay
            await Task.Delay(1000);
            showPopup = true;
            StateHasChanged();

            // Auto-hide popup after 5 seconds
            await Task.Delay(5000);
            showPopup = false;
            StateHasChanged();
        }
    }

    private void ToggleImmersive()
    {
        isImmersive = !isImmersive;
    }

    [JSInvokable]
    public void HandleSpacebar()
    {
        ToggleImmersive();
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (objRef != null)
        {
            await JSRuntime.InvokeVoidAsync("removeSpacebarListener");
            objRef.Dispose();
        }
    }
}
