@page "/custom-bingo"
@using BingoApp.Models
@using BingoApp.Services
@using Microsoft.AspNetCore.Components
@using System.Web
@using Microsoft.AspNetCore.Components.Web

@inject BingoSetService BingoService
@inject NavigationManager NavigationManager

<div class="bingo-container">
    <div class="bingo-header">
        <div class="bingo-title">
            <h1>Custom Bingo</h1>
            @if (selectedSet != null)
            {
                <p class="lead">Playing: @selectedSet.Name</p>
            }
            else
            {
                <p class="lead">Select a bingo set to play</p>
            }
        </div>
        <div class="bingo-controls">
            <div class="form-group me-2">
                <select class="form-select" id="bingoSet" @bind="selectedSetName" @bind:after="OnBingoSetSelected">
                    <option value="">Select a set...</option>
                    @foreach (var set in BingoService.GetAll())
                    {
                        <option value="@set.Name">@set.Name</option>
                    }
                </select>
            </div>
            <button class="btn btn-primary me-2" @onclick="SelectNext" disabled="@(selectedSet == null || isSelecting)">
                <i class="bi bi-shuffle"></i> Draw Item
            </button>
            <button class="btn btn-outline-primary me-2" @onclick="NewGame" disabled="@(selectedSet == null)">
                <i class="bi bi-arrow-repeat"></i> Reset
            </button>
            <a href="custom-bingo/manage" class="btn btn-outline-secondary">
                <i class="bi bi-gear"></i> Manage Sets
            </a>
        </div>
    </div>

    @if (selectedSet != null)
    {
        @if (currentItem != null)
        {
            <div class="current-item @(isAnimating ? "animate" : "")" aria-live="polite">
                <div class="item-display">
                    <span class="item">@currentItem</span>
                </div>
            </div>
        }

        <div class="called-items">
            <h4>Called Items</h4>
            <div class="called-items-grid">
                @if (calledItems.Count > 0)
                {
                    @foreach (var item in calledItems)
                    {
                        <div class="item-cell called">
                            <span>@item</span>
                        </div>
                    }
                }
                else
                {
                    <p>No items selected yet. Click "Draw Item" to begin.</p>
                }
            </div>
        </div>
    }
</div>

@code {
    private string selectedSetName = "";
    private BingoSet? selectedSet;
    private bool isSelecting = false;
    
    // Bingo board state
    private List<string> availableItems = new List<string>();
    private List<string> calledItems = new List<string>();
    private Random random = new Random();
    private string? currentItem;
    private bool isAnimating = false;

    protected override void OnInitialized()
    {
        // Check if there's a set name in the query string
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = HttpUtility.ParseQueryString(uri.Query);
        var setName = query["set"];
        if (!string.IsNullOrEmpty(setName))
        {
            selectedSetName = setName;
            LoadSelectedSet();
        }
    }

    private void OnBingoSetSelected()
    {
        LoadSelectedSet();
        if (selectedSet != null)
        {
            NewGame(); // Reset the game when selecting a new set
        }
    }

    private void LoadSelectedSet()
    {
        if (!string.IsNullOrEmpty(selectedSetName))
        {
            selectedSet = BingoService.GetByName(selectedSetName);
            if (selectedSet != null)
            {
                ResetGame();
            }
        }
        else
        {
            selectedSet = null;
        }
    }

    private void ResetGame()
    {
        if (selectedSet?.Items?.Length > 0)
        {
            availableItems = new List<string>(selectedSet.Items);
            calledItems.Clear();
            currentItem = null;
            isAnimating = false;
            StateHasChanged();
        }
    }

    private void NewGame()
    {
        ResetGame();
    }

    private async Task SelectNext()
    {
        if (availableItems.Count == 0 || isSelecting)
        {
            return;
        }

        isSelecting = true;
        
        try
        {
            // Briefly stop animation for visual feedback
            isAnimating = false;
            StateHasChanged();
            await Task.Delay(10);

            // Select a random item that hasn't been called yet
            int randomIndex = random.Next(0, availableItems.Count);
            currentItem = availableItems[randomIndex];
            availableItems.RemoveAt(randomIndex);
            calledItems.Add(currentItem);

            // Start the animation
            isAnimating = true;
            StateHasChanged();
        }
        finally
        {
            isSelecting = false;
        }
    }

    private void ToggleItem(string item)
    {
        if (calledItems.Contains(item))
        {
            calledItems.Remove(item);
            availableItems.Add(item);
        }
        else
        {
            calledItems.Add(item);
            availableItems.Remove(item);
        }
        StateHasChanged();
    }
}
